// Code generated by go-validate. DO NOT EDIT.

package models

import (
	"errors"
	"fmt"
	"regexp"
)

type ValidationError struct {
	Field string
	Err   error
}

func (v User) Validate() ([]ValidationError, error) {
	var resError []ValidationError
	var err error

	if len(v.ID) != 36 {
		resError = append(resError, ValidationError{Field: "ID", Err: errors.New("field length validation error")})
	}

	if v.Age < 18 {
		resError = append(resError, ValidationError{Field: "Age", Err: errors.New("field min validation error")})
	}

	if v.Age > 50 {
		resError = append(resError, ValidationError{Field: "Age", Err: errors.New("field max validation error")})
	}

	if _, err := regexp.MatchString(`^\w+@\w+\.\w+$`, v.Email); err != nil {
		return nil, fmt.Errorf("error while parsing regexp string: %w", err)
	}
	if matched, _ := regexp.MatchString(`^\w+@\w+\.\w+$`, v.Email); !matched {
		resError = append(resError, ValidationError{Field: "Email", Err: errors.New("regexp field validation error")})
	}

	for i, value := range []string{"admin", "stuff"} {
		if string(v.Role) == value {
			break
		} else if i == len([]string{"admin", "stuff"})-1 {
			resError = append(resError, ValidationError{Field: "Role", Err: errors.New("list validation error")})
		}
	}
	for _, val := range v.Phones {

		if len(val) != 11 {
			resError = append(resError, ValidationError{Field: "Phones", Err: errors.New("field length validation error")})
		}
	}
	return resError, err
}
func (v App) Validate() ([]ValidationError, error) {
	var resError []ValidationError
	var err error

	if len(v.Version) != 5 {
		resError = append(resError, ValidationError{Field: "Version", Err: errors.New("field length validation error")})
	}
	return resError, err
}
func (v Response) Validate() ([]ValidationError, error) {
	var resError []ValidationError
	var err error

	for i, value := range []int{200, 404, 500} {
		if v.Code == value {
			break
		} else if i == len([]int{200, 404, 500})-1 {
			resError = append(resError, ValidationError{Field: "Code", Err: errors.New("list validation error")})
		}
	}
	return resError, err
}
