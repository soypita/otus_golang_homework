package main

import (
	"fmt"
	"text/template"
)

const (
	basicTemplateName            = "basicTemplate"
	validateFuncTemplateName     = "validateFuncTemplate"
	lenValidationTemlateName     = "lenValidationTemlate"
	regexpValidationTemplateName = "regexpValidationTemplate"
	minValidationTemplateName    = "minValidationTemplate"
	maxValidationTemplateName    = "maxValidationTemplate"
	inListValidationTemplateName = "inListValidationTemplate"
	basicTemplate                = `{{define "basicTemplate"}}// Code generated by go-validate. DO NOT EDIT.

package {{ . }}

import (
	"errors"
	"fmt"
	"regexp"
)

type ValidationError struct {
	Field string
	Err   error
}

{{end}}
`
	validateFuncTemplate = `{{define "validateFuncTemplate"}}func (v {{ . }}) Validate() ([]ValidationError, error) {
	var resError []ValidationError
	var err error
	{{ end }}
`
	lenValidationTemlate = `{{define "lenValidationTemlate"}}
	if len({{if .IsNeedToConvert}} {{ .RawFiledType }}({{ .FieldName }}) {{else}} {{ .FieldName }} {{end}}) != {{ .Val }} {
	resError = append(resError, ValidationError{Field: "{{ .RawFieldName }}", Err: errors.New("field length validation error"),})
	}
	{{ end }}`
	regexpValidationTemplate = `{{ define "regexpValidationTemplate" }}
	if _, err := regexp.MatchString({{ .Val }}, {{if .IsNeedToConvert}} {{ .RawFiledType }}({{ .FieldName }}) {{else}} {{ .FieldName }} {{end}}); err != nil {
		return nil, fmt.Errorf("error while parsing regexp string: %w", err)
	}
	if matched, _ := regexp.MatchString({{ .Val }}, {{if .IsNeedToConvert}} {{ .RawFiledType }}({{ .FieldName }}) {{else}} {{ .FieldName }} {{end}}); !matched {
		resError = append(resError, ValidationError{Field: "{{ .RawFieldName }}", Err: errors.New("regexp field validation error"),})
	}
	{{ end }}`
	minValidationTemplate = `{{define "minValidationTemplate"}}
	if {{if .IsNeedToConvert}} {{ .RawFiledType }}({{ .FieldName }}) {{else}} {{ .FieldName }} {{end}} < {{ .Val }} {
		resError = append(resError, ValidationError{Field: "{{ .RawFieldName }}", Err: errors.New("field min validation error"),})
	}
	{{ end }}`
	maxValidationTemplate = `{{define "maxValidationTemplate"}}
	if {{if .IsNeedToConvert}} {{ .RawFiledType }}({{ .FieldName }}) {{else}} {{ .FieldName }} {{end}} > {{ .Val }} {
		resError = append(resError, ValidationError{Field: "{{ .RawFieldName }}", Err: errors.New("field max validation error"),})
	}
	{{ end }}`
	inListValidationTemplate = `{{define "inListValidationTemplate"}}
	for i, value := range []{{ .RawFiledType }}{ {{.Val}} } {
		if {{if .IsNeedToConvert}} {{ .RawFiledType }}({{ .FieldName }}) {{else}} {{ .FieldName }} {{end}} == value  {
			break
		} else if i == len([]{{ .RawFiledType }}{ {{.Val}} }) - 1 {
			resError = append(resError, ValidationError{Field: "{{ .RawFieldName }}", Err: errors.New("list validation error"),})
		}
	}
	{{ end }}`
)

// ErrParseTemplate for template parse errors.
var ErrParseTemplate = "erorr occur while parse template"

// ErrExecuteTemplate for template execute errors.
var ErrExecuteTemplate = "error occur while execute template"

// prepareTemplate parse all templates that is needed for generation.
func prepareTemplate() (*template.Template, error) {
	t := template.New("Generate Template")
	_, err := t.Parse(basicTemplate)
	if err != nil {
		return nil, fmt.Errorf("%s:%w", ErrParseTemplate, err)
	}
	_, err = t.Parse(validateFuncTemplate)
	if err != nil {
		return nil, fmt.Errorf("%s:%w", ErrParseTemplate, err)
	}
	_, err = t.Parse(lenValidationTemlate)
	if err != nil {
		return nil, fmt.Errorf("%s:%w", ErrParseTemplate, err)
	}
	_, err = t.Parse(regexpValidationTemplate)
	if err != nil {
		return nil, fmt.Errorf("%s:%w", ErrParseTemplate, err)
	}
	_, err = t.Parse(inListValidationTemplate)
	if err != nil {
		return nil, fmt.Errorf("%s:%w", ErrParseTemplate, err)
	}
	_, err = t.Parse(minValidationTemplate)
	if err != nil {
		return nil, fmt.Errorf("%s:%w", ErrParseTemplate, err)
	}
	_, err = t.Parse(maxValidationTemplate)
	if err != nil {
		return nil, fmt.Errorf("%s:%w", ErrParseTemplate, err)
	}

	return t, nil
}
