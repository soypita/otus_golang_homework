// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events_service.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Header               string               `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Duration             *duration.Duration   `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Description          string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	OwnerId              string               `protobuf:"bytes,5,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	NotifyBefore         *duration.Duration   `protobuf:"bytes,6,opt,name=notifyBefore,proto3" json:"notifyBefore,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_192ada64c58763bd, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *Event) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Event) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Event) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Event) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Event) GetNotifyBefore() *duration.Duration {
	if m != nil {
		return m.NotifyBefore
	}
	return nil
}

type EventUpdate struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Event                *Event   `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventUpdate) Reset()         { *m = EventUpdate{} }
func (m *EventUpdate) String() string { return proto.CompactTextString(m) }
func (*EventUpdate) ProtoMessage()    {}
func (*EventUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_192ada64c58763bd, []int{1}
}

func (m *EventUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventUpdate.Unmarshal(m, b)
}
func (m *EventUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventUpdate.Marshal(b, m, deterministic)
}
func (m *EventUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdate.Merge(m, src)
}
func (m *EventUpdate) XXX_Size() int {
	return xxx_messageInfo_EventUpdate.Size(m)
}
func (m *EventUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdate proto.InternalMessageInfo

func (m *EventUpdate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventUpdate) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventId) Reset()         { *m = EventId{} }
func (m *EventId) String() string { return proto.CompactTextString(m) }
func (*EventId) ProtoMessage()    {}
func (*EventId) Descriptor() ([]byte, []int) {
	return fileDescriptor_192ada64c58763bd, []int{2}
}

func (m *EventId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventId.Unmarshal(m, b)
}
func (m *EventId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventId.Marshal(b, m, deterministic)
}
func (m *EventId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventId.Merge(m, src)
}
func (m *EventId) XXX_Size() int {
	return xxx_messageInfo_EventId.Size(m)
}
func (m *EventId) XXX_DiscardUnknown() {
	xxx_messageInfo_EventId.DiscardUnknown(m)
}

var xxx_messageInfo_EventId proto.InternalMessageInfo

func (m *EventId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Events struct {
	Events               []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Events) Reset()         { *m = Events{} }
func (m *Events) String() string { return proto.CompactTextString(m) }
func (*Events) ProtoMessage()    {}
func (*Events) Descriptor() ([]byte, []int) {
	return fileDescriptor_192ada64c58763bd, []int{3}
}

func (m *Events) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Events.Unmarshal(m, b)
}
func (m *Events) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Events.Marshal(b, m, deterministic)
}
func (m *Events) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Events.Merge(m, src)
}
func (m *Events) XXX_Size() int {
	return xxx_messageInfo_Events.Size(m)
}
func (m *Events) XXX_DiscardUnknown() {
	xxx_messageInfo_Events.DiscardUnknown(m)
}

var xxx_messageInfo_Events proto.InternalMessageInfo

func (m *Events) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type DateRequest struct {
	Date                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DateRequest) Reset()         { *m = DateRequest{} }
func (m *DateRequest) String() string { return proto.CompactTextString(m) }
func (*DateRequest) ProtoMessage()    {}
func (*DateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_192ada64c58763bd, []int{4}
}

func (m *DateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DateRequest.Unmarshal(m, b)
}
func (m *DateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DateRequest.Marshal(b, m, deterministic)
}
func (m *DateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateRequest.Merge(m, src)
}
func (m *DateRequest) XXX_Size() int {
	return xxx_messageInfo_DateRequest.Size(m)
}
func (m *DateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DateRequest proto.InternalMessageInfo

func (m *DateRequest) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*EventUpdate)(nil), "EventUpdate")
	proto.RegisterType((*EventId)(nil), "EventId")
	proto.RegisterType((*Events)(nil), "Events")
	proto.RegisterType((*DateRequest)(nil), "DateRequest")
}

func init() {
	proto.RegisterFile("events_service.proto", fileDescriptor_192ada64c58763bd)
}

var fileDescriptor_192ada64c58763bd = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x95, 0x6c, 0x4d, 0xcb, 0x4b, 0x18, 0x92, 0x85, 0xa6, 0x2c, 0xa0, 0x2d, 0xca, 0x01,
	0x72, 0x72, 0xa5, 0x4d, 0x9c, 0xa6, 0x1d, 0xe8, 0x32, 0x50, 0x0f, 0x5c, 0x22, 0x10, 0x12, 0x17,
	0xe4, 0xd5, 0xaf, 0x9d, 0x45, 0x1a, 0x07, 0xc7, 0x1d, 0xca, 0x91, 0xbf, 0x94, 0x7f, 0x05, 0xc5,
	0x71, 0x4a, 0xe8, 0x44, 0xd9, 0xf1, 0xf9, 0x7d, 0xbe, 0xef, 0xc7, 0xf7, 0x19, 0x9e, 0xe3, 0x3d,
	0x96, 0xba, 0xfe, 0x5a, 0xa3, 0xba, 0x17, 0x0b, 0xa4, 0x95, 0x92, 0x5a, 0x46, 0x67, 0x2b, 0x29,
	0x57, 0x05, 0x4e, 0x4d, 0x74, 0xbb, 0x59, 0x4e, 0xb5, 0x58, 0x63, 0xad, 0xd9, 0xba, 0xb2, 0xc0,
	0xe9, 0x2e, 0xc0, 0x37, 0x8a, 0x69, 0x21, 0x4b, 0x9b, 0x7f, 0xb1, 0x9b, 0xc7, 0x75, 0xa5, 0x9b,
	0x2e, 0x99, 0xfc, 0x74, 0x61, 0x74, 0xd3, 0xb6, 0x25, 0xc7, 0xe0, 0xdd, 0x21, 0xe3, 0xa8, 0x42,
	0x27, 0x76, 0xd2, 0x27, 0xb9, 0x8d, 0x08, 0x85, 0x43, 0xce, 0x34, 0x86, 0x6e, 0xec, 0xa4, 0xfe,
	0x79, 0x44, 0xbb, 0x6a, 0xb4, 0xaf, 0x46, 0x3f, 0xf6, 0xe3, 0xe4, 0x86, 0x23, 0x6f, 0x60, 0xd2,
	0x0f, 0x10, 0x1e, 0x18, 0xcd, 0xc9, 0x03, 0x4d, 0x66, 0x81, 0x7c, 0x8b, 0x92, 0x18, 0x7c, 0x8e,
	0xf5, 0x42, 0x89, 0xca, 0x28, 0x0f, 0xcd, 0x0c, 0xc3, 0x27, 0x12, 0xc2, 0x58, 0xfe, 0x28, 0x51,
	0xcd, 0x79, 0x38, 0x32, 0xd9, 0x3e, 0x24, 0x57, 0x10, 0x94, 0x52, 0x8b, 0x65, 0x33, 0xc3, 0xa5,
	0x54, 0x18, 0x7a, 0xff, 0x6b, 0xfb, 0x17, 0x9e, 0x5c, 0x82, 0x6f, 0x2c, 0xf8, 0x54, 0x99, 0x05,
	0x8e, 0xc0, 0x15, 0xdc, 0x9a, 0xe0, 0x0a, 0x4e, 0x5e, 0xc2, 0xc8, 0x1c, 0xc6, 0x3a, 0xe0, 0x51,
	0x03, 0xe7, 0xdd, 0x63, 0x72, 0x02, 0x63, 0x13, 0xcf, 0xf9, 0xae, 0x30, 0x49, 0xc1, 0x33, 0xa9,
	0x9a, 0x9c, 0x82, 0xd7, 0xdd, 0x36, 0x74, 0xe2, 0x83, 0x41, 0x0d, 0xfb, 0x9a, 0x5c, 0x81, 0x9f,
	0x31, 0x8d, 0x39, 0x7e, 0xdf, 0x60, 0xad, 0xb7, 0x96, 0x3b, 0x8f, 0xb3, 0xfc, 0xfc, 0x97, 0x0b,
	0x93, 0x6b, 0x56, 0x60, 0xc9, 0x99, 0x22, 0x67, 0xe0, 0x5f, 0x2b, 0x64, 0x1a, 0xbb, 0xb3, 0xda,
	0x56, 0xd1, 0x84, 0xf6, 0x63, 0x5e, 0x80, 0xdf, 0x6d, 0xda, 0x01, 0x01, 0x1d, 0x2c, 0x1f, 0x1d,
	0x3f, 0x68, 0x76, 0xd3, 0xfe, 0x16, 0x32, 0x05, 0x3f, 0xc3, 0x02, 0x7b, 0xd1, 0xb6, 0xda, 0x1e,
	0x41, 0xf0, 0x1e, 0xf5, 0xdb, 0xa2, 0xb0, 0x16, 0xfc, 0x83, 0x8b, 0xc6, 0xd4, 0x02, 0xb1, 0x11,
	0x98, 0x60, 0xd6, 0xcc, 0xb3, 0x41, 0x0b, 0xbb, 0x02, 0x79, 0x05, 0x4f, 0xdf, 0x89, 0x92, 0x67,
	0xac, 0xb1, 0x92, 0x80, 0x0e, 0x5c, 0xfb, 0x53, 0xe9, 0x35, 0x1c, 0xb5, 0xdc, 0x67, 0xc4, 0x6f,
	0xfb, 0xc1, 0x14, 0x9e, 0xb5, 0xe0, 0x07, 0x59, 0xea, 0xbb, 0xbd, 0xe4, 0x6c, 0xf2, 0xc5, 0xa3,
	0x97, 0x2b, 0x55, 0x2d, 0x6e, 0x3d, 0x33, 0xff, 0xc5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3,
	0xaa, 0xbb, 0x9d, 0xad, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalendarClient is the client API for Calendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalendarClient interface {
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventId, error)
	UpdateEvent(ctx context.Context, in *EventUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteEvent(ctx context.Context, in *EventId, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAllEvents(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Events, error)
	GetEventByID(ctx context.Context, in *EventId, opts ...grpc.CallOption) (*Event, error)
	FindDayEvents(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*Events, error)
	FindWeekEvents(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*Events, error)
	FindMonthEvents(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*Events, error)
}

type calendarClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarClient(cc grpc.ClientConnInterface) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventId, error) {
	out := new(EventId)
	err := c.cc.Invoke(ctx, "/Calendar/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) UpdateEvent(ctx context.Context, in *EventUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Calendar/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DeleteEvent(ctx context.Context, in *EventId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Calendar/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetAllEvents(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/Calendar/GetAllEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetEventByID(ctx context.Context, in *EventId, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/Calendar/GetEventByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) FindDayEvents(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/Calendar/FindDayEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) FindWeekEvents(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/Calendar/FindWeekEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) FindMonthEvents(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/Calendar/FindMonthEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServer is the server API for Calendar service.
type CalendarServer interface {
	CreateEvent(context.Context, *Event) (*EventId, error)
	UpdateEvent(context.Context, *EventUpdate) (*empty.Empty, error)
	DeleteEvent(context.Context, *EventId) (*empty.Empty, error)
	GetAllEvents(context.Context, *empty.Empty) (*Events, error)
	GetEventByID(context.Context, *EventId) (*Event, error)
	FindDayEvents(context.Context, *DateRequest) (*Events, error)
	FindWeekEvents(context.Context, *DateRequest) (*Events, error)
	FindMonthEvents(context.Context, *DateRequest) (*Events, error)
}

// UnimplementedCalendarServer can be embedded to have forward compatible implementations.
type UnimplementedCalendarServer struct {
}

func (*UnimplementedCalendarServer) CreateEvent(ctx context.Context, req *Event) (*EventId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (*UnimplementedCalendarServer) UpdateEvent(ctx context.Context, req *EventUpdate) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (*UnimplementedCalendarServer) DeleteEvent(ctx context.Context, req *EventId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (*UnimplementedCalendarServer) GetAllEvents(ctx context.Context, req *empty.Empty) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEvents not implemented")
}
func (*UnimplementedCalendarServer) GetEventByID(ctx context.Context, req *EventId) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventByID not implemented")
}
func (*UnimplementedCalendarServer) FindDayEvents(ctx context.Context, req *DateRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDayEvents not implemented")
}
func (*UnimplementedCalendarServer) FindWeekEvents(ctx context.Context, req *DateRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWeekEvents not implemented")
}
func (*UnimplementedCalendarServer) FindMonthEvents(ctx context.Context, req *DateRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthEvents not implemented")
}

func RegisterCalendarServer(s *grpc.Server, srv CalendarServer) {
	s.RegisterService(&_Calendar_serviceDesc, srv)
}

func _Calendar_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).UpdateEvent(ctx, req.(*EventUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DeleteEvent(ctx, req.(*EventId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetAllEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetAllEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/GetAllEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetAllEvents(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/GetEventByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetEventByID(ctx, req.(*EventId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_FindDayEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).FindDayEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/FindDayEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).FindDayEvents(ctx, req.(*DateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_FindWeekEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).FindWeekEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/FindWeekEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).FindWeekEvents(ctx, req.(*DateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_FindMonthEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).FindMonthEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar/FindMonthEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).FindMonthEvents(ctx, req.(*DateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calendar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _Calendar_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _Calendar_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Calendar_DeleteEvent_Handler,
		},
		{
			MethodName: "GetAllEvents",
			Handler:    _Calendar_GetAllEvents_Handler,
		},
		{
			MethodName: "GetEventByID",
			Handler:    _Calendar_GetEventByID_Handler,
		},
		{
			MethodName: "FindDayEvents",
			Handler:    _Calendar_FindDayEvents_Handler,
		},
		{
			MethodName: "FindWeekEvents",
			Handler:    _Calendar_FindWeekEvents_Handler,
		},
		{
			MethodName: "FindMonthEvents",
			Handler:    _Calendar_FindMonthEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events_service.proto",
}
